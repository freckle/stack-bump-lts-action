name: Bump Stack LTS
description: |
  Update a Stack-based Haskell project to latest LTS and open a Pull Request
  with Changelog outlining the difference from current.

inputs:
  stack-yaml:
    description: "Path to stack.yaml"
    required: true
    default: stack.yaml
  snapshot-yaml:
    description: "Path to custom snapshot, if used"
    required: false
  working-directory:
    description: "Directory for all run steps"
    required: true
    default: .
  actor:
    description: "Login to use instead of github.actor"
    required: true
    default: ""
  github-repo:
    description: "Repo in which snapshots are kept, e.g.: commercialhaskell/stackage-snapshots"
  repo-branch:
    description: "Branch of snapshot repo to use"
    default: main

outputs:
  path:
    description: "File being updated"
    value: ${{ steps.setup.outputs.path }}
  current:
    description: "Current resolver"
    value: ${{ steps.setup.outputs.current }}
  latest:
    description: "Latest LTS resolver"
    value: ${{ steps.setup.outputs.latest }}
  newer-available:
    description: "True if we found a newer resolver"
    value: ${{ steps.update.outputs.newer-available }}
  build-errors:
    description: "True if stack was not able to build"
    value: ${{ steps.commit.outputs.build-errors }}
  commit-message:
    description: "Commit message used, including Changelog information"
    value: ${{ steps.commit.outputs.message }}

runs:
  using: composite
  steps:
    - name: Setup
      id: setup
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        gh_repo=${{ inputs.github-repo }}
        branch=${{ inputs.repo-branch }}
        if [ -n "${{ inputs.snapshot-yaml }}" ]; then
          path=${{ inputs.snapshot-yaml }}
        else
          path=${{ inputs.stack-yaml }}
        fi
        echo "path=$path" >>"$GITHUB_OUTPUT"

        current=$(sed '/^resolver: \(.*\)$/!d; s//\1/' "$path")
        echo "current=$current" >>"$GITHUB_OUTPUT"

        if [[ -z "$gh_repo" ]]; then
          latest=$(
            curl --silent -D - https://www.stackage.org/lts |
              sed '/^location: \/\(.*\)/!d; s//\1/;' |
              tr '\r\n' '\n'
          )
        else
          latest_version=$(
            gh api "/repos/$gh_repo/git/trees/$branch?recursive=true" -q '.tree[]|.path' |
              sort -rV |
              head -n 1
          )
          latest="https://raw.githubusercontent.com/$gh_repo/$branch/$latest_version"
        fi
        echo "latest=$latest" >>"$GITHUB_OUTPUT"
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Update resolver
      id: update
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        current=${{ steps.setup.outputs.current }}
        latest=${{ steps.setup.outputs.latest }}
        path=${{ steps.setup.outputs.path }}

        if [[ "$current" == "$latest" ]]; then
          echo "Up to date ($current)"
          echo "newer-available=false" >>"$GITHUB_OUTPUT"
          exit 0
        fi

        echo "newer-available=true" >>"$GITHUB_OUTPUT"

        sed -i 's/^resolver: .*$/resolver: '"$latest"'/' "$path"
    - if: ${{ inputs.dry-run != 'true' && steps.update.outputs.newer-available == 'true' }}
      name: Build and commit
      id: commit
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        current=${{ steps.setup.outputs.current }}
        latest=${{ steps.setup.outputs.latest }}
        stack_yaml=${{ inputs.stack-yaml }}
        stack_yaml_lock=${{ inputs.stack-yaml }}.lock
        path=${{ steps.setup.outputs.path }}
        if ! stack build --dry-run --test --bench --stack-yaml "$stack_yaml" ; then
          echo "build-errors=true" >>"$GITHUB_OUTPUT"
        fi

        commit_message() {
          cat <<EOM
        Bump Stackage Resolver to $latest

        See here for changed packages:

        https://rcl.freckle.com/?from=$current&to=$latest

        EOM
        }

        actor=${{ inputs.actor }}
        actor=${actor:-${{ github.actor }}}
        git config --global user.email "$actor@users.noreply.github.com"
        git config --global user.name "$actor"
        git commit "$stack_yaml" "$stack_yaml_lock" "$path" --file <(commit_message)

        delimiter="$(openssl rand -hex 8)"
        echo "message<<${delimiter}" >> $GITHUB_OUTPUT
        commit_message >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
